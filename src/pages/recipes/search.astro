---
import { getSession } from "auth-astro/server"
import Layout from "../../layouts/Layout.astro"
import SearchBar from "../../components/Search/SearchBar.astro"
import RecipeInstructions from "../../components/Recipe Instructions/recipeInstructions.astro"
import RecipesNav from "../../components/Recipes Nav/RecipesNav.astro"

const session = await getSession(Astro.request)

if (!session) {
  return Astro.redirect("/")
}
---

<Layout title="Search Recepies">
  <main class="min-h-screen flex flex-col text-black m-5 pt-[4rem] bg-white overflow-x-hidden">
    <SearchBar />
    <RecipesNav />
    <div class="border border-secondary-color w-full mb-4"></div>
    <RecipeInstructions />
    <section aria-label="Search Results">
      <p id="searchReadout"></p>
      <div id="searchResults"></div>
    </section>
  </main>
</Layout>

<script>
  import DOMPurify from "dompurify"
  import Fuse from "fuse.js"
  import type { Recipe } from "../search.json"

  let SEARCH_DATA: Recipe[] | undefined
  let FUSE_INSTANCE: any
  const FUSE_OPTIONS = {
  includeScore: true,
  shouldSort: true,
  threshold: .5,
  keys: [
    {
      name: "title",
      weight: 1
    },
    {
      name: "category",
      weight: 0.75
    }
  ]
}

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" id="spinner"><path d="M304 48c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm-48 368c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm208-208c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zM96 256c0-26.5-21.5-48-48-48S0 229.5 0 256s21.5 48 48 48 48-21.5 48-48zm12.9 99.1c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48c0-26.5-21.5-48-48-48zm294.2 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48c0-26.5-21.5-48-48-48zM108.9 60.9c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z"/><style>
    #spinner {
      animation: spin 2s linear infinite;
      with: 2rem;
      height: 2rem;
      }
    @keyframes spin {
      100% {
        transform: rotate(360deg);
      }
    }
    </style></svg>`

  const search = document.querySelector("#search")
  const searchReadout = document.querySelector("#searchReadout")
  const searchSpinner = document.querySelector("#searchResults")

  // functions
  function updateDocumentTitle(search: string) {
    document.title = search ? `Search results for "${search}"` : "Search Recipes"
  }

  function updateSearchReadout(search: string) {
    if (searchReadout instanceof HTMLElement) {
      searchReadout.innerText = search ? `Search results for "${search}"` : ""
    }
  }

  function updateSearchPageURL(search: string) {
    const url = new URL(window.location.href)
    url.searchParams.set("q", search)
    window.history.replaceState(null, "", url)
  }

  // Generate the Search List results from query
  function generateSearchList(results: Recipe[]) {
    return results.map((el) => {
      const { title, category, cookTime } = el.item
      return `<a href={/recipes/item/${id}} class="text-black relative w-44 flex flex-col gap-4 object-cover transition-all duration-500 group overflow-hidden">
        <div class="rounded-lg overflow-hidden h-40">
          <CldImage src=${image} alt=${image} width="16000" height="14000" class="w-full h-full rounded-xl group-hover:scale-105 transition-all duration-500 object-cover"/>
          <div class="backdrop-blur-sm bg-white/10 absolute top-3 right-3 rounded-lg p-1 group-hover:scale-105 transition-all duration-500 object-cover">
            <Icon name="like" class="size-6 text-white hover:text-red-700"/>
          </div>
        </div>
        <div class="text-text-primary [&>h2]:font-extrabold [&>h2]:text-lg [&>h2]:mb-2 [&>p]:text-sm">
          <h2>${title}</h2>
          <p>${category} {" â€¢ >"} ${cookTime}</p>
        </div>
      </a>`
    })
  }

  async function fetchSearchResults(search: string) {
    if (search.length === 0) return
    if (searchSpinner instanceof HTMLElement) searchSpinner.innerHTML = SPINNER

    if (!SEARCH_DATA) {
        try {
        const res = await fetch("/search.json")
        if (!res.ok && searchReadout instanceof HTMLElement) {
          searchReadout.innerText = "Something went wrong with the data source. Try again."
          throw new Error("Something went wrong with the data source. Try again.")
        }
        const data = await res.json()
        SEARCH_DATA = data as Recipe[]
      } catch (error) {
        throw new Error("Error in the searched data.")
      }
    }
    if (!FUSE_INSTANCE && SEARCH_DATA) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS)
    }

    if (!FUSE_INSTANCE) return
    const searchResult: Recipe[] = FUSE_INSTANCE.search(search)
    if (searchSpinner) {
      searchSpinner.innerHTML = searchResult.length > 0
        ? generateSearchList(searchResult).join("")
        : "No results found..."
    }
  }

  window.addEventListener("DOMContentLoaded", () => {
    const queryParam = new URLSearchParams(window.location.search).get("q")
    const urlParams = DOMPurify.sanitize(queryParam || "")
    if (search instanceof HTMLInputElement) {
      fetchSearchResults(urlParams)
      updateDocumentTitle(urlParams)
      updateSearchReadout(urlParams)
      search.value = urlParams || ""
      search.focus()
    }
  })

  search?.addEventListener("input", () => {
    const queryParam = (search as HTMLInputElement).value
    const searchTerm = DOMPurify.sanitize(queryParam)
    if (search instanceof HTMLInputElement) {
      updateDocumentTitle(searchTerm)
      updateSearchReadout(searchTerm)
      fetchSearchResults(searchTerm)
      updateSearchPageURL(searchTerm)
    }
  })
</script>