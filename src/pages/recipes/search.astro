---
import { getSession } from "auth-astro/server"
import Layout from "../../layouts/Layout.astro"
import SearchBar from "../../components/Search/SearchBar.astro"
import RecipeInstructions from "../../components/Recipe Instructions/recipeInstructions.astro"
import RecipesNav from "../../components/Recipes Nav/RecipesNav.astro"

const session = await getSession(Astro.request)

if (!session) {
  return Astro.redirect("/")
}
---

<Layout title="Search Recepies">
  <main class="min-h-screen flex flex-col text-black m-5 pt-[4rem] bg-white overflow-x-hidden">
    <SearchBar />
    <RecipesNav />
    <div class="border border-secondary-color w-full mb-4"></div>
    <RecipeInstructions />
    <section aria-label="Search Results">
      <p id="searchReadout"></p>
      <div id="searchResults"></div>
    </section>
  </main>
</Layout>

<script>
  import DOMPurify from "dompurify"
  import type { Recipe } from "../search.json"

  let SEARCH_DATA: Recipe | undefined

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" id="spinner"><path d="M304 48c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm-48 368c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm208-208c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zM96 256c0-26.5-21.5-48-48-48S0 229.5 0 256s21.5 48 48 48 48-21.5 48-48zm12.9 99.1c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48c0-26.5-21.5-48-48-48zm294.2 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48c0-26.5-21.5-48-48-48zM108.9 60.9c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z"/><style>
    #spinner {
      animation: spin 1s linear infinite
      }
    @keyframes spin {
      100% {
        transform: rotate(360deg);
      }
    }
    </style></svg>`

  const search = document.querySelector("#search")
  const searchReadout = document.querySelector("#searchReadout")
  const searchResults = document.querySelector("#searchResults")

  // functions
  function updateDocumentTitle(search: string) {
    document.title = search ? `Search results for "${search}"` : "Search Recipes"
  }

  function updateSearchReadout(search: string) {
    if (searchReadout instanceof HTMLElement) {
      searchReadout.innerText = search ? `Search results for "${search}"` : ""
    }
  }

  async function fetchSearchResults(search: string) {
    if (search.length === 0) return
    if (searchResults instanceof HTMLElement) searchResults.innerHTML = SPINNER

    if (!SEARCH_DATA) {
        try {
        const res = await fetch("/search.json")
        if (!res.ok && searchReadout instanceof HTMLElement) {
          searchReadout.innerText = "Something went wrong with the data source. Try again."
          throw new Error("Something went wrong with the data source. Try again.")
        }
        const data = await res.json()
        SEARCH_DATA = data
      } catch (error) {
        throw new Error("Error in the searched data.")
      }
    }
  }

  window.addEventListener("DOMContentLoaded", () => {
    const queryParam = new URLSearchParams(window.location.search).get("q")
    const urlParams = DOMPurify.sanitize(queryParam || "")
    if (search instanceof HTMLInputElement) {
      fetchSearchResults(urlParams)
      updateDocumentTitle(urlParams)
      updateSearchReadout(urlParams)
      search.value = urlParams || ""
      search.focus()
    }
  })

  search?.addEventListener("input", () => {
    const queryParam = (search as HTMLInputElement).value
    const searchTerm = DOMPurify.sanitize(queryParam)
    if (search instanceof HTMLInputElement) {
      updateDocumentTitle(searchTerm)
      updateSearchReadout(searchTerm)
      fetchSearchResults(searchTerm)
    }
  })
</script>